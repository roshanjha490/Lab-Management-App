/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken } from '@angular/core';
import { HammerLoader } from '@angular/platform-browser';
/** Injection token that configures whether the Material sanity checks are enabled. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/cdk/bidi';
export declare const MATERIAL_SANITY_CHECKS: InjectionToken<boolean>;
/** @docs-private */
export declare function MATERIAL_SANITY_CHECKS_FACTORY(): boolean;
/**
 * Module that captures anything that should be loaded and/or run for *all* Angular Material
 * components. This includes Bidi, etc.
 *
 * This module should be imported to each top-level component module (e.g., MatTabsModule).
 */
export declare class MatCommonModule {
    private _sanityChecksEnabled;
    private _hammerLoader?;
    /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */
    private _hasDoneGlobalChecks;
    /** Whether we've already checked for HammerJs availability. */
    private _hasCheckedHammer;
    /** Reference to the global `document` object. */
    private _document;
    /** Reference to the global 'window' object. */
    private _window;
    constructor(_sanityChecksEnabled: boolean, _hammerLoader?: HammerLoader | undefined);
    /** Whether any sanity checks are enabled */
    private _areChecksEnabled;
    /** Whether the code is running in tests. */
    private _isTestEnv;
    private _checkDoctypeIsDefined;
    private _checkThemeIsPresent;
    /** Checks whether the material version matches the cdk version */
    private _checkCdkVersionMatch;
    /** Checks whether HammerJS is available. */
    _checkHammerIsAvailable(): void;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MatCommonModule, never, [typeof ɵngcc1.BidiModule], [typeof ɵngcc1.BidiModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MatCommonModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLW1vZHVsZS5kLnRzIiwic291cmNlcyI6WyJjb21tb24tbW9kdWxlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhhbW1lckxvYWRlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuLyoqIEluamVjdGlvbiB0b2tlbiB0aGF0IGNvbmZpZ3VyZXMgd2hldGhlciB0aGUgTWF0ZXJpYWwgc2FuaXR5IGNoZWNrcyBhcmUgZW5hYmxlZC4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE1BVEVSSUFMX1NBTklUWV9DSEVDS1M6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuLyoqIEBkb2NzLXByaXZhdGUgKi9cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIE1BVEVSSUFMX1NBTklUWV9DSEVDS1NfRkFDVE9SWSgpOiBib29sZWFuO1xuLyoqXG4gKiBNb2R1bGUgdGhhdCBjYXB0dXJlcyBhbnl0aGluZyB0aGF0IHNob3VsZCBiZSBsb2FkZWQgYW5kL29yIHJ1biBmb3IgKmFsbCogQW5ndWxhciBNYXRlcmlhbFxuICogY29tcG9uZW50cy4gVGhpcyBpbmNsdWRlcyBCaWRpLCBldGMuXG4gKlxuICogVGhpcyBtb2R1bGUgc2hvdWxkIGJlIGltcG9ydGVkIHRvIGVhY2ggdG9wLWxldmVsIGNvbXBvbmVudCBtb2R1bGUgKGUuZy4sIE1hdFRhYnNNb2R1bGUpLlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRDb21tb25Nb2R1bGUge1xuICAgIHByaXZhdGUgX3Nhbml0eUNoZWNrc0VuYWJsZWQ7XG4gICAgcHJpdmF0ZSBfaGFtbWVyTG9hZGVyPztcbiAgICAvKiogV2hldGhlciB3ZSd2ZSBkb25lIHRoZSBnbG9iYWwgc2FuaXR5IGNoZWNrcyAoZS5nLiBhIHRoZW1lIGlzIGxvYWRlZCwgdGhlcmUgaXMgYSBkb2N0eXBlKS4gKi9cbiAgICBwcml2YXRlIF9oYXNEb25lR2xvYmFsQ2hlY2tzO1xuICAgIC8qKiBXaGV0aGVyIHdlJ3ZlIGFscmVhZHkgY2hlY2tlZCBmb3IgSGFtbWVySnMgYXZhaWxhYmlsaXR5LiAqL1xuICAgIHByaXZhdGUgX2hhc0NoZWNrZWRIYW1tZXI7XG4gICAgLyoqIFJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIGBkb2N1bWVudGAgb2JqZWN0LiAqL1xuICAgIHByaXZhdGUgX2RvY3VtZW50O1xuICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCAnd2luZG93JyBvYmplY3QuICovXG4gICAgcHJpdmF0ZSBfd2luZG93O1xuICAgIGNvbnN0cnVjdG9yKF9zYW5pdHlDaGVja3NFbmFibGVkOiBib29sZWFuLCBfaGFtbWVyTG9hZGVyPzogSGFtbWVyTG9hZGVyIHwgdW5kZWZpbmVkKTtcbiAgICAvKiogV2hldGhlciBhbnkgc2FuaXR5IGNoZWNrcyBhcmUgZW5hYmxlZCAqL1xuICAgIHByaXZhdGUgX2FyZUNoZWNrc0VuYWJsZWQ7XG4gICAgLyoqIFdoZXRoZXIgdGhlIGNvZGUgaXMgcnVubmluZyBpbiB0ZXN0cy4gKi9cbiAgICBwcml2YXRlIF9pc1Rlc3RFbnY7XG4gICAgcHJpdmF0ZSBfY2hlY2tEb2N0eXBlSXNEZWZpbmVkO1xuICAgIHByaXZhdGUgX2NoZWNrVGhlbWVJc1ByZXNlbnQ7XG4gICAgLyoqIENoZWNrcyB3aGV0aGVyIHRoZSBtYXRlcmlhbCB2ZXJzaW9uIG1hdGNoZXMgdGhlIGNkayB2ZXJzaW9uICovXG4gICAgcHJpdmF0ZSBfY2hlY2tDZGtWZXJzaW9uTWF0Y2g7XG4gICAgLyoqIENoZWNrcyB3aGV0aGVyIEhhbW1lckpTIGlzIGF2YWlsYWJsZS4gKi9cbiAgICBfY2hlY2tIYW1tZXJJc0F2YWlsYWJsZSgpOiB2b2lkO1xufVxuIl19