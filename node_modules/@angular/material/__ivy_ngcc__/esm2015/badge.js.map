{"version":3,"file":"badge.js","sources":["../../../src/material/badge/badge.ts","../../../src/material/badge/badge-module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  SimpleChanges,\n  isDevMode,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled, ThemePalette} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {}\n\nconst _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge') content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n            badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement | undefined;\n\n  constructor(\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      private _renderer: Renderer2,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n      super();\n\n      if (isDevMode()) {\n        const nativeElement = _elementRef.nativeElement;\n        if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n          throw Error('matBadge must be attached to an element node.');\n        }\n      }\n    }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const contentChange = changes['content'];\n\n    if (contentChange) {\n      const value = contentChange.currentValue;\n      this._hasContent = value != null && `${value}`.trim().length > 0;\n      this._updateTextContent();\n    }\n  }\n\n  ngOnDestroy() {\n    const badgeElement = this._badgeElement;\n\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      if (this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n\n  /**\n   * Gets the element into which the badge's content is being rendered.\n   * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n   */\n  getBadgeElement(): HTMLElement | undefined {\n    return this._badgeElement;\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    const badgeElement = this._renderer.createElement('span');\n    const activeClass = 'mat-badge-active';\n    const contentClass = 'mat-badge-content';\n\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n\n    if (this._animationMode === 'NoopAnimations') {\n      badgeElement.classList.add('_mat-animation-noopable');\n    }\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n  /** Clears any existing badges that might be left over from server-side rendering. */\n  private _clearExistingBadges(cssClass: string) {\n    const element = this._elementRef.nativeElement;\n    let childCount = element.children.length;\n\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      const currentChild = element.children[childCount];\n\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n"]}