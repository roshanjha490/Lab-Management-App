{"version":3,"file":"drag-drop.js","sources":["../../../src/cdk/drag-drop/drag-styling.ts","../../../src/cdk/drag-drop/transition-duration.ts","../../../src/cdk/drag-drop/drag-ref.ts","../../../src/cdk/drag-drop/drag-utils.ts","../../../src/cdk/drag-drop/drop-list-ref.ts","../../../src/cdk/drag-drop/drag-drop-registry.ts","../../../src/cdk/drag-drop/drag-drop.ts","../../../src/cdk/drag-drop/drop-list-container.ts","../../../src/cdk/drag-drop/drag-parent.ts","../../../src/cdk/drag-drop/directives/drag-handle.ts","../../../src/cdk/drag-drop/directives/drag-placeholder.ts","../../../src/cdk/drag-drop/directives/drag-preview.ts","../../../src/cdk/drag-drop/directives/drag.ts","../../../src/cdk/drag-drop/directives/drop-list-group.ts","../../../src/cdk/drag-drop/directives/drop-list.ts","../../../src/cdk/drag-drop/drag-drop-module.ts"],"names":["clamp","_uniqueIdCounter"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EmbeddedViewRef, ElementRef, NgZone, ViewContainerRef, TemplateRef} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Direction} from '@angular/cdk/bidi';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Subscription, Subject, Observable} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {DropListRefInternal as DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\n\n/** Object that can be used to configure the behavior of DragRef. */\nexport interface DragRefConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/**\n * Internal compile-time-only representation of a `DragRef`.\n * Used to avoid circular import issues between the `DragRef` and the `DropListRef`.\n * @docs-private\n */\nexport interface DragRefInternal extends DragRef {}\n\n/** Template that can be used to create a drag helper element (e.g. a preview or a placeholder). */\ninterface DragHelperTemplate<T = any> {\n  template: TemplateRef<T> | null;\n  viewContainer: ViewContainerRef;\n  context: T;\n}\n\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * @docs-private\n */\nexport class DragRef<T = any> {\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  private _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the DragRef resided when dragging began. */\n  private _initialContainer: DropListRef;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }>();\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /**\n   * Root DOM node of the drag instance. This is the element that will\n   * be moved around as the user is dragging.\n   */\n  private _rootElement: HTMLElement;\n\n  /**\n   * Inline style value of `-webkit-tap-highlight-color` at the time the\n   * dragging was started. Used to restore the value once we're done dragging.\n   */\n  private _rootElementTapHighlight: string | null;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n\n  /** Subscription to the viewport being scrolled. */\n  private _scrollSubscription = Subscription.EMPTY;\n\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Time at which the last dragging sequence was started. */\n  private _dragStartTime: number;\n\n  /** Cached reference to the boundary element. */\n  private _boundaryElement: HTMLElement | null = null;\n\n  /** Whether the native dragging interactions have been enabled on the root element. */\n  private _nativeInteractionsEnabled = true;\n\n  /** Cached dimensions of the preview element. */\n  private _previewRect?: ClientRect;\n\n  /** Cached dimensions of the boundary element. */\n  private _boundaryRect?: ClientRect;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  private _previewTemplate?: DragHelperTemplate | null;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  private _placeholderTemplate?: DragHelperTemplate | null;\n\n  /** Elements that can be used to drag the draggable item. */\n  private _handles: HTMLElement[] = [];\n\n  /** Registered handles that are currently disabled. */\n  private _disabledHandles = new Set<HTMLElement>();\n\n  /** Droppable container that the draggable is a part of. */\n  private _dropContainer?: DropListRef;\n\n  /** Layout direction of the item. */\n  private _direction: Direction = 'ltr';\n\n  /** Axis along which dragging is locked. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  dragStartDelay: number = 0;\n\n  /** Whether starting to drag this element is disabled. */\n  get disabled(): boolean {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n    }\n  }\n  private _disabled = false;\n\n  /** Emits as the drag sequence is being prepared. */\n  beforeStarted = new Subject<void>();\n\n  /** Emits when the user starts dragging the item. */\n  started = new Subject<{source: DragRef}>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  released = new Subject<{source: DragRef}>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  ended = new Subject<{source: DragRef, distance: Point}>();\n\n  /** Emits when the user has moved the item into a new container. */\n  entered = new Subject<{container: DropListRef, item: DragRef, currentIndex: number}>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  exited = new Subject<{container: DropListRef, item: DragRef}>();\n\n  /** Emits when the user drops the item inside a container. */\n  dropped = new Subject<{\n    previousIndex: number;\n    currentIndex: number;\n    item: DragRef;\n    container: DropListRef;\n    previousContainer: DropListRef;\n    distance: Point;\n    isPointerOverContainer: boolean;\n  }>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  moved: Observable<{\n    source: DragRef;\n    pointerPosition: {x: number, y: number};\n    event: MouseEvent | TouchEvent;\n    distance: Point;\n    delta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n  }> = this._moveEvents.asObservable();\n\n  /** Arbitrary data that can be attached to the drag item. */\n  data: T;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _config: DragRefConfig,\n    private _document: Document,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {\n\n    this.withRootElement(element);\n    _dragDropRegistry.registerDragItem(this);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles: (HTMLElement | ElementRef<HTMLElement>)[]): this {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n    this._toggleNativeDragInteractions();\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag preview.\n   * @param template Template that from which to stamp out the preview.\n   */\n  withPreviewTemplate(template: DragHelperTemplate | null): this {\n    this._previewTemplate = template;\n    return this;\n  }\n\n  /**\n   * Registers the template that should be used for the drag placeholder.\n   * @param template Template that from which to stamp out the placeholder.\n   */\n  withPlaceholderTemplate(template: DragHelperTemplate | null): this {\n    this._placeholderTemplate = template;\n    return this;\n  }\n\n  /**\n   * Sets an alternate drag root element. The root element is the element that will be moved as\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\n   * dragging on an element that you might not have access to.\n   */\n  withRootElement(rootElement: ElementRef<HTMLElement> | HTMLElement): this {\n    const element = coerceElement(rootElement);\n\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n\n      element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n      element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n\n    return this;\n  }\n\n  /**\n   * Element to which the draggable's position will be constrained.\n   */\n  withBoundaryElement(boundaryElement: ElementRef<HTMLElement> | HTMLElement | null): this {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    return this;\n  }\n\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      removeElement(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._boundaryElement = this._rootElement = this._placeholderTemplate =\n        this._previewTemplate = this._nextSibling = null!;\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  isDragging(): boolean {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  /**\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n   * @param handle Handle element that should be disabled.\n   */\n  disableHandle(handle: HTMLElement) {\n    if (this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n    }\n  }\n\n  /**\n   * Enables a handle, if it has been disabled.\n   * @param handle Handle element to be enabled.\n   */\n  enableHandle(handle: HTMLElement) {\n    this._disabledHandles.delete(handle);\n  }\n\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container: DropListRef) {\n    this._dropContainer = container;\n  }\n\n  /**\n   * Gets the current position in pixels the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): Readonly<Point> {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {x: position.x, y: position.y};\n  }\n\n  /**\n   * Sets the current position in pixels the draggable outside of a drop container.\n   * @param value New position to be set.\n   */\n  setFreeDragPosition(value: Point): this {\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n\n    return this;\n  }\n\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._pointerPositionAtLastDirectionChange;\n\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(position);\n    }\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  private _pointerDown = (event: MouseEvent | TouchEvent) => {\n    this.beforeStarted.next();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (this._handles.length) {\n      const targetHandle = this._handles.find(handle => {\n        const target = event.target;\n        return !!target && (target === handle || handle.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n        this._initializeDragSequence(targetHandle, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    if (!this._hasStartedDragging) {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n      const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (isOverThreshold) {\n        const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\n        if (!isDelayElapsed) {\n          this._endDragSequence(event);\n          return;\n        }\n\n        // Prevent other drag sequences from starting while something in the container is still\n        // being dragged. This can happen while we're waiting for the drop animation to finish\n        // and can cause errors, because some elements might still be moving around.\n        if (!this._dropContainer || !this._dropContainer.isDragging()) {\n          this._hasStartedDragging = true;\n          this._ngZone.run(() => this._startDragSequence(event));\n        }\n      }\n\n      return;\n    }\n\n    // We only need the preview dimensions if we have a boundary element.\n    if (this._boundaryElement) {\n      // Cache the preview element rect if we haven't cached it already or if\n      // we cached it too early before the element dimensions were computed.\n      if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n        this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n      }\n    }\n\n    const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(constrainedPointerPosition);\n\n    if (this._dropContainer) {\n      this._updateActiveDropContainer(constrainedPointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n\n      this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEvents.observers.length) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition: constrainedPointerPosition,\n          event,\n          distance: this._getDragDistance(constrainedPointerPosition),\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = (event: MouseEvent | TouchEvent) => {\n    this._endDragSequence(event);\n  }\n\n  /**\n   * Clears subscriptions and stops the dragging sequence.\n   * @param event Browser event object that ended the sequence.\n   */\n  private _endDragSequence(event: MouseEvent | TouchEvent) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    this.released.next({source: this});\n\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n        });\n      });\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.next({source: this});\n\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    this._toggleNativeDragInteractions();\n\n    if (this._dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      getPreviewInsertionPoint(this._document).appendChild(preview);\n      this._dropContainer.start();\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && (event as MouseEvent).button !== 0;\n    const rootElement = this._rootElement;\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n      this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n      rootElement.style.webkitTapHighlightColor = 'transparent';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this._dropContainer!;\n\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeSubscriptions();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe(() => {\n      this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n    });\n\n    if (this._boundaryElement) {\n      this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n    }\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n      {x: 0, y: 0} :\n      this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts(event: MouseEvent | TouchEvent) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._boundaryRect = this._previewRect = undefined;\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer!;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n      const isPointerOverContainer = container._isOverContainer(\n        pointerPosition.x, pointerPosition.y);\n\n      this.ended.next({source: this, distance});\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance\n      });\n      container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer &&\n        this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({item: this, container: this._dropContainer!});\n        this._dropContainer!.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer!;\n        this._dropContainer.enter(this, x, y);\n        this.entered.next({\n          item: this,\n          container: newContainer!,\n          currentIndex: newContainer!.getItemIndex(this)\n        });\n      });\n    }\n\n    this._dropContainer!._startScrollingIfNecessary(x, y);\n    this._dropContainer!._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    const previewConfig = this._previewTemplate;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview: HTMLElement;\n\n    if (previewTemplate) {\n      const viewRef = previewConfig!.viewContainer.createEmbeddedView(previewTemplate,\n                                                                      previewConfig!.context);\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      pointerEvents: 'none',\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    toggleNativeDragInteractions(preview, false);\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n\n    return preview;\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder: HTMLElement;\n\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig!.viewContainer.createEmbeddedView(\n        placeholderTemplate,\n        placeholderConfig!.context\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      constrainedPoint.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      constrainedPoint.x = this._pickupPositionOnPage.x;\n    }\n\n    if (this._boundaryRect) {\n      const {x: pickupX, y: pickupY} = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const previewRect = this._previewRect!;\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewRect.width - pickupX);\n\n      constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n      constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n    }\n\n    return constrainedPoint;\n  }\n\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  private _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n\n  /** Removes the manually-added event listeners from the root element. */\n  private _removeRootElementListeners(element: HTMLElement) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n  }\n\n  /**\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\n   * @param x New transform value along the X axis.\n   * @param y New transform value along the Y axis.\n   */\n  private _applyRootElementTransform(x: number, y: number) {\n    const transform = getTransform(x, y);\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    this._rootElement.style.transform = this._initialTransform ?\n      transform + ' ' + this._initialTransform  : transform;\n  }\n\n  /**\n   * Gets the distance that the user has dragged during the current drag sequence.\n   * @param currentPosition Current position of the user's pointer.\n   */\n  private _getDragDistance(currentPosition: Point): Point {\n    const pickupPosition = this._pickupPositionOnPage;\n\n    if (pickupPosition) {\n      return {x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y};\n    }\n\n    return {x: 0, y: 0};\n  }\n}\n\n/** Point on the page or within an element. */\nexport interface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const descendantCanvases = node.querySelectorAll('canvas');\n\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n\n  // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n  // We match up the cloned canvas to their sources using their index in the DOM.\n  if (descendantCanvases.length) {\n    const cloneCanvases = clone.querySelectorAll('canvas');\n\n    for (let i = 0; i < descendantCanvases.length; i++) {\n      const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n\n      if (correspondingCloneContext) {\n        correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n      }\n    }\n  }\n\n  return clone;\n}\n\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(max, value));\n}\n\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param element Element to be removed.\n */\nfunction removeElement(element: HTMLElement | null) {\n  if (element && element.parentNode) {\n    element.parentNode.removeChild(element);\n  }\n}\n\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef: any): HTMLElement {\n  // We can't use the body if the user is in fullscreen mode,\n  // because the preview will render under the fullscreen element.\n  // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n  return documentRef.fullscreenElement ||\n         documentRef.webkitFullscreenElement ||\n         documentRef.mozFullScreenElement ||\n         documentRef.msFullscreenElement ||\n         documentRef.body;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceElement} from '@angular/cdk/coercion';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Subject, Subscription, interval, animationFrameScheduler} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {moveItemInArray} from './drag-utils';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {DragRefInternal as DragRef, Point} from './drag-ref';\n\n/** Counter used to generate unique ids for drop refs. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface CachedItemPosition {\n  /** Instance of the drag item. */\n  drag: DragRef;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/** Object holding the scroll position of something. */\ninterface ScrollPosition {\n  top: number;\n  left: number;\n}\n\n/** Vertical direction in which we can auto-scroll. */\nconst enum AutoScrollVerticalDirection {NONE, UP, DOWN}\n\n/** Horizontal direction in which we can auto-scroll. */\nconst enum AutoScrollHorizontalDirection {NONE, LEFT, RIGHT}\n\n/**\n * Internal compile-time-only representation of a `DropListRef`.\n * Used to avoid circular import issues between the `DropListRef` and the `DragRef`.\n * @docs-private\n */\nexport interface DropListRefInternal extends DropListRef {}\n\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * @docs-private\n */\nexport class DropListRef<T = any> {\n  private _document: Document;\n\n  /** Element that the drop list is attached to. */\n  element: HTMLElement | ElementRef<HTMLElement>;\n\n  /**\n   * Unique ID for the drop list.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean = false;\n\n  /** Whether sorting items within the list is disabled. */\n  sortingDisabled: boolean = true;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /**\n   * Whether auto-scrolling the view when the user\n   * moves their pointer close to the edges is disabled.\n   */\n  autoScrollDisabled: boolean = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  enterPredicate: (drag: DragRef, drop: DropListRef) => boolean = () => true;\n\n  /** Emits right before dragging has started. */\n  beforeStarted = new Subject<void>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  entered = new Subject<{item: DragRef, container: DropListRef, currentIndex: number}>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  exited = new Subject<{item: DragRef, container: DropListRef}>();\n\n  /** Emits when the user drops an item inside the container. */\n  dropped = new Subject<{\n    item: DragRef,\n    currentIndex: number,\n    previousIndex: number,\n    container: DropListRef,\n    previousContainer: DropListRef,\n    isPointerOverContainer: boolean,\n    distance: Point;\n  }>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  sorted = new Subject<{\n    previousIndex: number,\n    currentIndex: number,\n    container: DropListRef,\n    item: DragRef\n  }>();\n\n  /** Arbitrary data that can be attached to the drop list. */\n  data: T;\n\n  /** Whether an item in the list is being dragged. */\n  private _isDragging = false;\n\n  /** Cache of the dimensions of all the items inside the container. */\n  private _itemPositions: CachedItemPosition[] = [];\n\n  /** Keeps track of the container's scroll position. */\n  private _scrollPosition: ScrollPosition = {top: 0, left: 0};\n\n  /** Keeps track of the scroll position of the viewport. */\n  private _viewportScrollPosition: ScrollPosition = {top: 0, left: 0};\n\n  /** Cached `ClientRect` of the drop list. */\n  private _clientRect: ClientRect;\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: DragRef[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as DragRef | null, delta: 0};\n\n  /** Draggable items in the container. */\n  private _draggables: ReadonlyArray<DragRef>;\n\n  /** Drop lists that are connected to the current one. */\n  private _siblings: ReadonlyArray<DropListRef> = [];\n\n  /** Direction in which the list is oriented. */\n  private _orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /** Connected siblings that currently have a dragged item. */\n  private _activeSiblings = new Set<DropListRef>();\n\n  /** Layout direction of the drop list. */\n  private _direction: Direction = 'ltr';\n\n  /** Subscription to the window being scrolled. */\n  private _viewportScrollSubscription = Subscription.EMPTY;\n\n  /** Vertical direction in which the list is currently scrolling. */\n  private _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n\n  /** Horizontal direction in which the list is currently scrolling. */\n  private _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n  /** Node that is being auto-scrolled. */\n  private _scrollNode: HTMLElement | Window;\n\n  /** Used to signal to the current auto-scroll sequence when to stop. */\n  private _stopScrollTimers = new Subject<void>();\n\n  constructor(\n    element: ElementRef<HTMLElement> | HTMLElement,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>,\n    _document: any,\n    /**\n     * @deprecated _ngZone and _viewportRuler parameters to be made required.\n     * @breaking-change 9.0.0\n     */\n    private _ngZone?: NgZone,\n    private _viewportRuler?: ViewportRuler) {\n    _dragDropRegistry.registerDropContainer(this);\n    this._document = _document;\n    this.element = element instanceof ElementRef ? element.nativeElement : element;\n  }\n\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._removeListeners();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null!;\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    const element = coerceElement(this.element);\n    this.beforeStarted.next();\n    this._isDragging = true;\n    this._cacheItems();\n    this._siblings.forEach(sibling => sibling._startReceiving(this));\n    this._removeListeners();\n\n    // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\n    if (this._ngZone) {\n      this._ngZone.runOutsideAngular(() => element.addEventListener('scroll', this._handleScroll));\n    } else {\n      element.addEventListener('scroll', this._handleScroll);\n    }\n\n    // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\n    if (this._viewportRuler) {\n      this._viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n      this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(() => {\n        if (this.isDragging()) {\n          const newPosition = this._viewportRuler!.getViewportScrollPosition();\n          this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left,\n                                  this._clientRect);\n        }\n      });\n    }\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: DragRef, pointerX: number, pointerY: number): void {\n    this.start();\n\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n\n    if (newIndex === -1) {\n      // We use the coordinates of where the item entered the drop\n      // zone to figure out at which index it should be inserted.\n      newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    }\n\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference: DragRef | undefined = activeDraggables[newIndex];\n\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      coerceElement(this.element).appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cacheItemPositions();\n    this.entered.next({item, container: this, currentIndex: this.getItemIndex(item)});\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: DragRef): void {\n    this._reset();\n    this.exited.next({item, container: this});\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\n   * @breaking-change 9.0.0 `distance` parameter to become required.\n   */\n  drop(item: DragRef, currentIndex: number, previousContainer: DropListRef,\n    isPointerOverContainer: boolean, distance: Point = {x: 0, y: 0}): void {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance\n    });\n  }\n\n  /**\n   * Sets the draggable items that are a part of this list.\n   * @param items Items that are a part of this list.\n   */\n  withItems(items: DragRef[]): this {\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n\n    if (this.isDragging()) {\n      this._cacheItems();\n    }\n\n    return this;\n  }\n\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction: Direction): this {\n    this._direction = direction;\n    return this;\n  }\n\n  /**\n   * Sets the containers that are connected to this one. When two or more containers are\n   * connected, the user will be allowed to transfer items between them.\n   * @param connectedTo Other containers that the current containers should be connected to.\n   */\n  connectedTo(connectedTo: DropListRef[]): this {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n\n  /**\n   * Sets the orientation of the container.\n   * @param orientation New orientation for the container.\n   */\n  withOrientation(orientation: 'vertical' | 'horizontal'): this {\n    this._orientation = orientation;\n    return this;\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: DragRef): number {\n    if (!this._isDragging) {\n      return this._draggables.indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n        this._itemPositions.slice().reverse() : this._itemPositions;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Whether the list is able to receive the item that\n   * is currently being dragged inside a connected drop list.\n   */\n  isReceiving(): boolean {\n    return this._activeSiblings.size > 0;\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: DragRef, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.next({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Checks whether the user's pointer is close to the edges of either the\n   * viewport or the drop list and starts the auto-scroll sequence.\n   * @param pointerX User's pointer position along the x axis.\n   * @param pointerY User's pointer position along the y axis.\n   */\n  _startScrollingIfNecessary(pointerX: number, pointerY: number) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n\n    let scrollNode: HTMLElement | Window | undefined;\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n\n    // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\n    // Check whether we're in range to scroll the viewport.\n    if (this._viewportRuler) {\n      const {width, height} = this._viewportRuler.getViewportSize();\n      const clientRect = {width, height, top: 0, right: width, bottom: height, left: 0};\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n\n    // If we couldn't find a scroll direction based on the\n    // window, try with the container, if the pointer is close by.\n    if (!verticalScrollDirection && !horizontalScrollDirection &&\n        this._isPointerNearDropContainer(pointerX, pointerY)) {\n      verticalScrollDirection = getVerticalScrollDirection(this._clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(this._clientRect, pointerX);\n      scrollNode = coerceElement(this.element);\n    }\n\n    // TODO(crisbeto): we also need to account for whether the view or element are scrollable in\n    // the first place. With the current approach we'll still try to scroll them, but it just\n    // won't do anything. The only case where this is relevant is that if we have a scrollable\n    // list close to the viewport edge where the viewport isn't scrollable. In this case the\n    // we'll be trying to scroll the viewport rather than the list.\n\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n        horizontalScrollDirection !== this._horizontalScrollDirection ||\n        scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\n        if (this._ngZone) {\n          this._ngZone.runOutsideAngular(this._startScrollInterval);\n        } else {\n          this._startScrollInterval();\n        }\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n\n  /** Caches the position of the drop list. */\n  private _cacheOwnPosition() {\n    const element = coerceElement(this.element);\n    this._clientRect = getMutableClientRect(element);\n    this._scrollPosition = {top: element.scrollTop, left: element.scrollLeft};\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cacheItemPositions() {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n          // If the element is being dragged, we have to measure the\n          // placeholder, because the element is hidden.\n          drag.getPlaceholderElement() :\n          drag.getRootElement();\n      return {drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure)};\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                            a.clientRect.top - b.clientRect.top;\n    });\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._isDragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._activeDraggables = [];\n    this._itemPositions = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._stopScrolling();\n    this._removeListeners();\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: CachedItemPosition[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this._orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._clientRect;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this._orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: DragRef, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n    const isHorizontal = this._orientation === 'horizontal';\n\n    return findIndex(this._itemPositions, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /** Caches the current items in the list and their positions. */\n  private _cacheItems(): void {\n    this._activeDraggables = this._draggables.slice();\n    this._cacheItemPositions();\n    this._cacheOwnPosition();\n  }\n\n  /**\n   * Updates the internal state of the container after a scroll event has happened.\n   * @param scrollPosition Object that is keeping track of the scroll position.\n   * @param newTop New top scroll position.\n   * @param newLeft New left scroll position.\n   * @param extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n   *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n   *  the `ClientRect` of the list.\n   */\n  private _updateAfterScroll(scrollPosition: ScrollPosition, newTop: number, newLeft: number,\n    extraClientRect?: ClientRect) {\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n\n    if (extraClientRect) {\n      adjustClientRect(extraClientRect, topDifference, leftDifference);\n    }\n\n    // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n    // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n    // behavior where we might be measuring the element before its position has changed.\n    this._itemPositions.forEach(({clientRect}) => {\n      adjustClientRect(clientRect, topDifference, leftDifference);\n    });\n\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({drag}) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n  }\n\n  /** Handles the container being scrolled. Has to be an arrow function to preserve the context. */\n  private _handleScroll = () => {\n    if (!this.isDragging()) {\n      return;\n    }\n\n    const element = coerceElement(this.element);\n    this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n  }\n\n  /** Removes the event listeners associated with this drop list. */\n  private _removeListeners() {\n    coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n    this._viewportScrollSubscription.unsubscribe();\n  }\n\n  /** Starts the interval that'll auto-scroll the element. */\n  private _startScrollInterval = () => {\n    this._stopScrolling();\n\n    interval(0, animationFrameScheduler)\n      .pipe(takeUntil(this._stopScrollTimers))\n      .subscribe(() => {\n        const node = this._scrollNode;\n\n        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n          incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n          incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n        }\n\n        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n          incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n          incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n        }\n      });\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return isInsideClientRect(this._clientRect, x, y);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: DragRef, x: number, y: number): DropListRef | undefined {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n\n  /**\n   * Checks whether the drop list can receive the passed-in item.\n   * @param item Item that is being dragged into the list.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReceive(item: DragRef, x: number, y: number): boolean {\n    if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n      return false;\n    }\n\n    const elementFromPoint = this._document.elementFromPoint(x, y) as HTMLElement | null;\n\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n\n    const nativeElement = coerceElement(this.element);\n\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n\n  /**\n   * Called by one of the connected drop lists when a dragging sequence has started.\n   * @param sibling Sibling in which dragging has started.\n   */\n  _startReceiving(sibling: DropListRef) {\n    const activeSiblings = this._activeSiblings;\n\n    if (!activeSiblings.has(sibling)) {\n      activeSiblings.add(sibling);\n      this._cacheOwnPosition();\n    }\n  }\n\n  /**\n   * Called by a connected drop list when dragging has stopped.\n   * @param sibling Sibling whose dragging has stopped.\n   */\n  _stopReceiving(sibling: DropListRef) {\n    this._activeSiblings.delete(sibling);\n  }\n}\n\n\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element: Element): ClientRect {\n  const clientRect = element.getBoundingClientRect();\n\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height\n  };\n}\n\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(0, amount);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollTop += amount;\n  }\n}\n\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node: HTMLElement | Window, amount: number) {\n  if (node === window) {\n    (node as Window).scrollBy(amount, 0);\n  } else {\n    // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n    (node as HTMLElement).scrollLeft += amount;\n  }\n}\n\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect: ClientRect, pointerY: number) {\n  const {top, bottom, height} = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return AutoScrollVerticalDirection.UP;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return AutoScrollVerticalDirection.DOWN;\n  }\n\n  return AutoScrollVerticalDirection.NONE;\n}\n\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect: ClientRect, pointerX: number) {\n  const {left, right, width} = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return AutoScrollHorizontalDirection.LEFT;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return AutoScrollHorizontalDirection.RIGHT;\n  }\n\n  return AutoScrollHorizontalDirection.NONE;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<string, {\n    handler: (event: Event) => void,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /** Emits when the viewport has been scrolled while the user is dragging an item. */\n  readonly scroll: Subject<Event> = new Subject<Event>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventDefaultWhileDragging,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.has(drag)) {\n      return;\n    }\n\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: (e: Event) => this.pointerMove.next(e as TouchEvent | MouseEvent),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: (e: Event) => this.pointerUp.next(e as TouchEvent | MouseEvent),\n          options: true\n        })\n        .set('scroll', {\n          handler: (e: Event) => this.scroll.next(e)\n        })\n        // Preventing the default action on `mousemove` isn't enough to disable text selection\n        // on Safari so we need to prevent the selection event as well. Alternatively this can\n        // be done by setting `user-select: none` on the `body`, however it has causes a style\n        // recalculation which can be expensive on pages with a lot of elements.\n        .set('selectstart', {\n          handler: this._preventDefaultWhileDragging,\n          options: activeCapturingEventOptions\n        });\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /**\n   * Gets a drop container by its id.\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 8.0.0\n   */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Event listener that will prevent the default browser action while the user is dragging.\n   * @param event Event whose default action should be prevented.\n   */\n  private _preventDefaultWhileDragging = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Inject, NgZone, ElementRef} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DragRef, DragRefConfig} from './drag-ref';\nimport {DropListRef} from './drop-list-ref';\nimport {DragDropRegistry} from './drag-drop-registry';\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\n@Injectable({providedIn: 'root'})\nexport class DragDrop {\n  constructor(\n    @Inject(DOCUMENT) private _document: any,\n    private _ngZone: NgZone,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<DragRef, DropListRef>) {}\n\n  /**\n   * Turns an element into a draggable item.\n   * @param element Element to which to attach the dragging functionality.\n   * @param config Object used to configure the dragging behavior.\n   */\n  createDrag<T = any>(element: ElementRef<HTMLElement> | HTMLElement,\n                config: DragRefConfig = DEFAULT_CONFIG): DragRef<T> {\n\n    return new DragRef<T>(element, config, this._document, this._ngZone, this._viewportRuler,\n        this._dragDropRegistry);\n  }\n\n  /**\n   * Turns an element into a drop list.\n   * @param element Element to which to attach the drop list functionality.\n   */\n  createDropList<T = any>(element: ElementRef<HTMLElement> | HTMLElement): DropListRef<T> {\n    return new DropListRef<T>(element, this._dragDropRegistry, this._document, this._ngZone,\n        this._viewportRuler);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './directives/drag';\n\n\n/**\n * @deprecated To be removed. No longer being used. Previously the interface was used to avoid\n * circular imports between `CdkDrag` and `CdkDropList`, however now we're using the\n * `CdkDropListInternal` interface to achieve the same result, without having to maintain\n * this large of an interface.\n * @breaking-change 8.0.0\n */\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n        isPointerOverContainer: boolean): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _isOverContainer(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST = new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST');\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * @breaking-change 8.0.0\n */\nexport const CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input, OnDestroy} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subject} from 'rxjs';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {toggleNativeDragInteractions} from '../drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle implements OnDestroy {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Emits when the state of the handle has changed. */\n  _stateChanges = new Subject<CdkDragHandle>();\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n  OnChanges,\n  SimpleChanges,\n  ChangeDetectorRef,\n  isDevMode,\n} from '@angular/core';\nimport {coerceBooleanProperty, coerceNumberProperty, coerceElement} from '@angular/cdk/coercion';\nimport {Observable, Observer, Subject, merge} from 'rxjs';\nimport {startWith, take, map, takeUntil, switchMap, tap} from 'rxjs/operators';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n  CdkDragRelease,\n} from '../drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST} from '../drop-list-container';\nimport {CDK_DRAG_PARENT} from '../drag-parent';\nimport {DragRef, DragRefConfig, Point} from '../drag-ref';\nimport {CdkDropListInternal as CdkDropList} from './drop-list';\nimport {DragDrop} from '../drag-drop';\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<DragRefConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): DragRefConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-disabled]': 'disabled',\n    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n  },\n  providers: [{provide: CDK_DRAG_PARENT, useExisting: CdkDrag}]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnChanges, OnDestroy {\n  private _destroyed = new Subject<void>();\n\n  /** Reference to the underlying drag instance. */\n  _dragRef: DragRef<CdkDrag<T>>;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview, {static: false}) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder, {static: false}) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /**\n   * Node or selector that will be used to determine the element to which the draggable's\n   * position will be constrained. If a string is passed in, it'll be used as a selector that\n   * will be matched starting from the element's parent and going up the DOM until a match\n   * has been found.\n   */\n  @Input('cdkDragBoundary') boundaryElement: string | ElementRef<HTMLElement> | HTMLElement;\n\n  /**\n   * Selector that will be used to determine the element to which the draggable's position will\n   * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n   * element has been found\n   * @deprecated Use `boundaryElement` instead.\n   * @breaking-change 9.0.0\n   */\n  get boundaryElementSelector(): string {\n    return typeof this.boundaryElement === 'string' ? this.boundaryElement : undefined!;\n  }\n  set boundaryElementSelector(selector: string) {\n    this.boundaryElement = selector;\n  }\n\n  /**\n   * Amount of milliseconds to wait after the user has put their\n   * pointer down before starting to drag the element.\n   */\n  @Input('cdkDragStartDelay') dragStartDelay: number = 0;\n\n  /**\n   * Sets the position of a `CdkDrag` that is outside of a drop container.\n   * Can be used to restore the element's position for a returning user.\n   */\n  @Input('cdkDragFreeDragPosition') freeDragPosition: {x: number, y: number};\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  private _disabled = false;\n\n  /**\n   * Function that can be used to customize the logic of how the position of the drag item\n   * is limited while it's being dragged. Gets called with a point containing the current position\n   * of the user's pointer on the page and should return a point describing where the item should\n   * be rendered.\n   */\n  @Input('cdkDragConstrainPosition') constrainPosition?: (point: Point, dragRef: DragRef) => Point;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user has released a drag item, before any animations have started. */\n  @Output('cdkDragReleased') released: EventEmitter<CdkDragRelease> =\n      new EventEmitter<CdkDragRelease>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      new Observable((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n          source: this,\n          pointerPosition: movedEvent.pointerPosition,\n          event: movedEvent.event,\n          delta: movedEvent.delta,\n          distance: movedEvent.distance\n        }))).subscribe(observer);\n\n        return () => {\n          subscription.unsubscribe();\n        };\n      });\n\n  constructor(\n      /** Element that the draggable is attached to. */\n      public element: ElementRef<HTMLElement>,\n      /** Droppable container that the draggable is a part of. */\n      @Inject(CDK_DROP_LIST) @Optional() @SkipSelf() public dropContainer: CdkDropList,\n      @Inject(DOCUMENT) private _document: any, private _ngZone: NgZone,\n      private _viewContainerRef: ViewContainerRef, @Inject(CDK_DRAG_CONFIG) config: DragRefConfig,\n      @Optional() private _dir: Directionality, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef) {\n    this._dragRef = dragDrop.createDrag(element, config);\n    this._dragRef.data = this;\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._dragRef.getPlaceholderElement();\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._dragRef.getRootElement();\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._dragRef.reset();\n  }\n\n  /**\n   * Gets the pixel coordinates of the draggable outside of a drop container.\n   */\n  getFreeDragPosition(): {readonly x: number, readonly y: number} {\n    return this._dragRef.getFreeDragPosition();\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._ngZone.onStable.asObservable()\n      .pipe(take(1), takeUntil(this._destroyed))\n      .subscribe(() => {\n        this._updateRootElement();\n\n        // Listen for any newly-added handles.\n        this._handles.changes.pipe(\n          startWith(this._handles),\n          // Sync the new handles with the DragRef.\n          tap((handles: QueryList<CdkDragHandle>) => {\n            const childHandleElements = handles\n              .filter(handle => handle._parentDrag === this)\n              .map(handle => handle.element);\n            this._dragRef.withHandles(childHandleElements);\n          }),\n          // Listen if the state of any of the handles changes.\n          switchMap((handles: QueryList<CdkDragHandle>) => {\n            return merge(...handles.map(item => item._stateChanges));\n          }),\n          takeUntil(this._destroyed)\n        ).subscribe(handleInstance => {\n          // Enabled/disable the handle that changed in the DragRef.\n          const dragRef = this._dragRef;\n          const handle = handleInstance.element.nativeElement;\n          handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._dragRef.dispose();\n  }\n\n  /** Syncs the root element with the `DragRef`. */\n  private _updateRootElement() {\n    const element = this.element.nativeElement;\n    const rootElement = this.rootElementSelector ?\n        getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n\n    if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n      throw Error(`cdkDrag must be attached to an element node. ` +\n                  `Currently attached to \"${rootElement.nodeName}\".`);\n    }\n\n    this._dragRef.withRootElement(rootElement || element);\n  }\n\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  private _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n\n    if (!boundary) {\n      return null;\n    }\n\n    if (typeof boundary === 'string') {\n      return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n    }\n\n    const element = coerceElement(boundary);\n\n    if (isDevMode() && !element.contains(this.element.nativeElement)) {\n      throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n    }\n\n    return element;\n  }\n\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  private _syncInputs(ref: DragRef<CdkDrag<T>>) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref\n          .withBoundaryElement(this._getBoundaryElement())\n          .withPlaceholderTemplate(placeholder)\n          .withPreviewTemplate(preview);\n\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n  }\n\n  /** Handles the events from the underlying `DragRef`. */\n  private _handleEvents(ref: DragRef<CdkDrag<T>>) {\n    ref.started.subscribe(() => {\n      this.started.emit({source: this});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.released.subscribe(() => {\n      this.released.emit({source: this});\n    });\n\n    ref.ended.subscribe(event => {\n      this.ended.emit({source: this, distance: event.distance});\n\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: event.container.data,\n        item: this,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: event.container.data,\n        item: this\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        item: this,\n        distance: event.distance\n      });\n    });\n  }\n}\n\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element: HTMLElement, selector: string) {\n  let currentElement = element.parentElement as HTMLElement | null;\n\n  while (currentElement) {\n    // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n    if (currentElement.matches ? currentElement.matches(selector) :\n        (currentElement as any).msMatchesSelector(selector)) {\n      return currentElement;\n    }\n\n    currentElement = currentElement.parentElement;\n  }\n\n  return null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  @Input('cdkDropListGroupDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n  AfterContentInit,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from '../drag-events';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from '../drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {DropListRef} from '../drop-list-ref';\nimport {DragRef} from '../drag-ref';\nimport {DragDrop} from '../drag-drop';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Internal compile-time-only representation of a `CdkDropList`.\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\n * @docs-private\n */\nexport interface CdkDropListInternal extends CdkDropList {}\n\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-disabled]': 'disabled',\n    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n  }\n})\nexport class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Keeps track of the drop lists that are currently on the page. */\n  private static _dropLists: CdkDropList[] = [];\n\n  /** Reference to the underlying drop list instance. */\n  _dropListRef: DropListRef<CdkDropList<T>>;\n\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag), {\n    // Explicitly set to false since some of the logic below makes assumptions about it.\n    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n    descendants: false\n  }) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean {\n    return this._disabled || (!!this._group && this._group.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Whether sorting within this drop list is disabled. */\n  @Input('cdkDropListSortingDisabled')\n  get sortingDisabled(): boolean { return this._sortingDisabled; }\n  set sortingDisabled(value: boolean) {\n    this._sortingDisabled = coerceBooleanProperty(value);\n  }\n  private _sortingDisabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n  @Input('cdkDropListAutoScrollDisabled')\n  autoScrollDisabled: boolean = false;\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n      /** Element that the drop list is attached to. */\n      public element: ElementRef<HTMLElement>, dragDrop: DragDrop,\n      private _changeDetectorRef: ChangeDetectorRef, @Optional() private _dir?: Directionality,\n      @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n    this._dropListRef.enterPredicate = (drag: DragRef<CdkDrag>, drop: DropListRef<CdkDropList>) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n\n    this._syncInputs(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n\n  ngAfterContentInit() {\n    this._draggables.changes\n      .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n      .subscribe((items: QueryList<CdkDrag>) => {\n        this._dropListRef.withItems(items.map(drag => drag._dragRef));\n      });\n  }\n\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dropListRef.start();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   * @param isPointerOverContainer Whether the user's pointer was over the\n   *    container when the item was dropped.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>,\n    isPointerOverContainer: boolean): void {\n    this._dropListRef.drop(item._dragRef, currentIndex,\n      (previousContainer as CdkDropList)._dropListRef, isPointerOverContainer);\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._dropListRef.exit(item._dragRef);\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    return this._dropListRef.getItemIndex(item._dragRef);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n    CdkDropListContainer | null {\n    const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n    return result ? result.data : null;\n  }\n\n  /**\n   * Checks whether the user's pointer is positioned over the container.\n   * @param x Pointer position along the X axis.\n   * @param y Pointer position along the Y axis.\n   */\n  _isOverContainer(x: number, y: number): boolean {\n    return this._dropListRef._isOverContainer(x, y);\n  }\n\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  private _syncInputs(ref: DropListRef<CdkDropList>) {\n    if (this._dir) {\n      this._dir.change\n        .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n        .subscribe(value => ref.withDirection(value));\n    }\n\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        return typeof drop === 'string' ?\n            CdkDropList._dropLists.find(list => list.id === drop)! : drop;\n      });\n\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = this.sortingDisabled;\n      ref.autoScrollDisabled = this.autoScrollDisabled;\n      ref\n        .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n        .withOrientation(this.orientation);\n    });\n  }\n\n  /** Handles events from the underlying DropListRef. */\n  private _handleEvents(ref: DropListRef<CdkDropList>) {\n    ref.beforeStarted.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n\n    ref.dropped.subscribe(event => {\n      this.dropped.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        previousContainer: event.previousContainer.data,\n        container: event.container.data,\n        item: event.item.data,\n        isPointerOverContainer: event.isPointerOverContainer,\n        distance: event.distance\n      });\n\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './directives/drop-list';\nimport {CdkDropListGroup} from './directives/drop-list-group';\nimport {CdkDrag} from './directives/drag';\nimport {CdkDragHandle} from './directives/drag-handle';\nimport {CdkDragPreview} from './directives/drag-preview';\nimport {CdkDragPlaceholder} from './directives/drag-placeholder';\nimport {DragDrop} from './drag-drop';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  providers: [\n    DragDrop,\n  ]\n})\nexport class DragDropModule {}\n"]}